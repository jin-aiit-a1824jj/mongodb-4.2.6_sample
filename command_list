https://qiita.com/FukuharaYohei/items/d109f5c3f5dce0d972e4

sudo service mongod start

mongod
mongod --dbpath <./db> --logpath <./log>
db.adminCommand({shutdown: 1, force: true})

https://docs.mongodb.com/manual/reference/configuration-options/

mongod --config <./mongod.cfg>

mongo 127.0.0.1:27017/booklog ./sample-data/insert.js 
mongo
use booklog
show collections
exit

mongo 127.0.0.1:27017/booklog ./sample-data/drop.js 
use booklog
show collections
exit


db
show dbs
db.dropDatabase()

mongo
use sample
db
show dbs
db.createCollection("test")
db.dropDatabase()
show dbs

mongo 
use sample
db.createCollection("test")
show collections
db.test.renameCollection("new_test", true)
show collection
db.new_test.drop()
db.new_test.drop()

mongo
use booklog
show collections
「
db.users.insert({
  email: "sachiko.sato@sample.co.jp",
  password: "P@ssw0rd",
  name: "佐藤　幸子"
})
」
db.users.find()
「
db.users.update({
  email: "sachiko.sato@sample.co.jp",
}, {$set: {password: "querty"},
}, {multi: true})
」
db.users.find({email: "sachiko.sato@sample.co.jp"})
db.users.remove({email: "sachiko.sato@sample.co.jp"})

mongo
use booklog
db.books.count()
db.books.count({ publisher: "新朝社"})
db.books.find({ publisher: "新朝社"}).count()

mongo
use booklog
db.books.find().sort({price: 1})
db.books.find().sort({price: -1})
db.books.find({publisher: "新朝社"}).sort({launch: -1})

mongo
use booklog
db.books.find().sort({price: -1})
db.books.find().sort({price: -1}).skip(2)
db.books.find().sort({price: -1}).skip(2).limit(3)

mongo
use booklog
db.users.createIndex({email:1}, {name:"IX_EMAIL"})
db.users.getIndexes()
db.users.dropIndex("IX_EMAIL")

mongo
use booklog
db.users.createIndex({email:1}, {name:"IX_EMAIL", unique: true})
db.users.getIndexes()
db.users.insert({name: "abc", email: "tsuyoshi.tanaka@sample.co.jp"})
db.users.dropIndex("IX_EMAIL")
db.users.insert({name: "abc", email: "tsuyoshi.tanaka@sample.co.jp"})
db.users.remove({name: "abc", email: "tsuyoshi.tanaka@sample.co.jp"})


mongo
use booklog
db.books.find({publisher: {$eq: "講話社"}})
db.books.find({publisher: {$ne: "講話社"}})
db.books.find({price: {$gt: 454}})
db.books.find({price: {$gte: 454}})
db.books.find({price: {$lt: 454}})
db.books.find({price: {$lte: 454}})
db.books.find({publisher: {$in: ["講話社", "角河書店"]}})
db.books.find({launch: {$gt: ISODate("2003-01-01T00:00:00+09:00")}})

mongo
use booklog
db.books.find({$and:[{publisher: "新朝社"},{price: {$gt: 300}}]})
db.books.find({$or:[{publisher: "新朝社"},{publisher: "角河書店"}]})
db.books.find({ price: { $not: { $gt: 500}}})
db.books.find({publisher: {$not: /新朝社/}})


mongo
use booklog
db.books.find({publisher: {$regex: /社/g}})
db.books.find({publisher: /社/g})

mongo
use booklog
db.authors.find({ dob: { $exists: true}})
db.authors.find({ dob: { $type: "string"}})
db.authors.find({
  $and:[ 
    { dob: { $exists: true}},
    { dob: {$not: { $type: "date"}}} 
  ]
})

mongo
use booklog
db.books.find({
  categories:{
    $elemMatch: { $eq: "日本文学"}
  }
})
db.books.find({categories: "日本文学"})

db.users.find({
  bookshelf:{
    $elemMatch:{
      status: "読了",
      readed: {$gte: ISODate("2018-02-01T00:00:00+09:00")}
    }
  }
}).pretty()
db.users.find({
  "bookshelf.status" : "読了"
}).pretty()

db.books.find({
  categories: { $size: 3}
})

db.books.find({
  $expr:{
    $gt: [{$size: "$categories"}, 1]
  }  
})



mongo
use booklog
db.authors.update(
  {name: "与謝野 晶子"},
  {$set: {dob: ISODate("1878-12-07T00:00:00+09:00")}}
)
db.authors.find()


mongo
use booklog
db.authors.update(
  {name: "正岡 子規"},
  {$set: {dob: ISODate("1867-10-14T00:00:00+09:00")}}
)
db.authors.update(
  {name: "正岡 子規"},
  {$set: {dob: null}}
)
db.authors.find({dob: null})
db.authors.update(
  {name: "正岡 子規"},
  {$unset: {dob: ""}}
)
db.authors.find({dob: null})


mongo
use booklog
db.users.update(
  {},
  {$rename: { sex: "gender"}},
  {multi: true}
)


mongo
use booklog
db.users.update(
  {name: "田中 剛"},
  {$set: { password: "hoge"}, $currentDate: {updated: true}}
)


mongo
use booklog
db.reviews.update(
  {},
  {$inc: {score: 1}},
  {multi: true}
)
db.reviews.update(
  {},
  {$inc: {score: -1}},
  {multi: true}
)
db.reviews.update(
  {},
  {$mul: {score: 2}},
  {multi: true}
)
db.reviews.update(
  {},
  {$mul: {score: 0.5}},
  {multi: true}
)



mongo
use booklog
db.users.update(
  {name: "田中 剛"},
  {
    $push:{
      bookshelf:{
        book: "書籍１",
        registered: ISODate()
      }
    }
  }
)
db.users.find({name: "田中 剛"}).pretty()
db.users.update(
  {name: "田中 剛"},
  {
    $push:{
      bookshelf:{
        $each:[
          {
            book: "書籍２",
            registered: ISODate("2018-07-12T12:00:00+09:00")
          },
          {
            book: "書籍３",
            registered: ISODate("2018-06-28T12:00:00+09:00")
          }
        ]
      }
    }
  }
)

db.users.update(
  {name: "田中 剛"},
  {
    $push:{
      bookshelf:{
        $each:[],
        $sort:{ registered: -1}
      }
    }
  }
)

db.users.update(
  {name: "田中 剛"},
  {
    $push:{
      bookshelf:{
        $each:[],
        $slice: 5
      }
    }
  }
)

db.users.update(
  {name: "田中 剛"},
  {
    $push:{
      bookshelf:{
        $each:[
          {
            book: "書籍x",
            registered: ISODate("2018-08-01T12:00:00+09:00")
          }
        ],
        $position: 0
      }
    }
  }
)

db.users.update(
  {name: "田中 剛"},
  {
    $push:{
      bookshelf:{
        $each:[
          {
            book: "組み合わせ書籍（上）",
            registered: ISODate("2018-07-31T12:00:00+09:00")
          },
          {
            book: "組み合わせ書籍（上）",
            registered: ISODate("2018-07-31T12:00:00+09:00")
          }
        ],
        $sort:{ registered: -1},
        $slice: 5
      }
    }
  }
)


mongo
use booklog
db.users.update(
  {name: "田中 剛"},
  {
    $set:{
      "bookshelf.$[item].status": "終了"
    }
  },
  {
    arrayFilters:[
      {"item.book": ObjectId("5b6f033a6c25c37f77e6917d")}
    ]
  }
)

db.users.update(
  {name: "田中 剛"},
  {
    $set:{
      "bookshelf.$[item].status": "終了2",
      "bookshelf.$[item].readed": ISODate()
    }
  },
  {
    arrayFilters:[
      {"item.book": ObjectId("5b6f033a6c25c37f77e6917d")}
    ]
  }
)