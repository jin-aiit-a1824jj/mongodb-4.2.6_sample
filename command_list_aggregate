mongo
use booklog
db.books.aggregate([
  { $match: {publisher: "講話社"}}
])
db.books.aggregate([
  { $match: {publisher: { $ne: "講話社"}}}
])
db.books.aggregate([
  { $match: { price: {$gt: 500}}}
])
db.books.aggregate([
  { $match: { price: {$lt: 500}}}
])
db.books.aggregate([
  { $match: { publisher: /社/g}}
])


mongo
use booklog
db.books.aggregate([
  {$match: {publisher: "講話社"}},
  {$project: {_id: 0}}
])
db.books.aggregate([
  {$match: {publisher: "講話社"}},
  {$project: {_id: 0, title: 1}}
])
db.books.aggregate([
  {$match: {publisher: "講話社"}},
  {$project: {_id: 0, title: 0}}
])


mongo
use booklog
db.books.aggregate([
  {$project: {_id: 0, title: 1, price: 1}},
  {$sort: {price: 1}}
])
db.books.aggregate([
  {$project: {_id: 0, title: 1, price: 1}},
  {$sort: {price: -1}}
])


mongo
use booklog
db.books.aggregate([
  {$count: "count"}
])
db.books.aggregate([
  {$match: {publisher: "講話社"}},
  {$count: "count"}
])


mongo
use booklog
db.books.aggregate([
  { $group: { _id: "$publisher" }}
])
db.books.aggregate([
  { $group: { _id: "$publisher", count: { $sum: 1} }}
])
db.books.aggregate([
  { $group: { _id: "$publisher", count: { $sum: 1} }},
  { $sort: {count: -1}}
])


mongo
use booklog
db.books.aggregate([
  { $group: { _id: "$publisher", cost: { $sum: "$price"}, page: {$sum: "$pages"}}}
])
db.books.aggregate([
  { $group: { _id: "$publisher", cost: { $sum: "$price"}, page: {$sum: "$pages"}}},
  { $project: { cpp: { $multiply: [{ $divide: ["$cost","$page"]}, 100] } } }
])


mongo
use booklog
db.books.aggregate([ 
  { $group: { _id: "$publisher", min: { $min: "$price"}, max: {$max: "$price"}}}
])
db.books.aggregate([ 
  { $group: { _id: {
    year: { $year: "$launch"},
    month: {$month: "$launch"},
  }, min: { $min: "$price"}, max: {$max: "$price"}}}
])
db.books.aggregate([ 
  { $group: { _id: {
    year: { $year: "$launch"},
    month: {$month: "$launch"},
  }, min: { $min: "$price"}, max: {$max: "$price"}}},
  { $sort: { _id: -1}}
])


mongo
use booklog
db.books.aggregate([ 
  { $group: { _id: 0, avg: { $avg: "$price"}, stddev: {$stdDevPop: "$price"}}}
])


mongo
use booklog
db.books.aggregate([
  { $sort: { launch: -1 }}, 
  { $project: { _id: 0, title: 1, launch: 1}}
])
db.books.aggregate([
  { $sort: { launch: -1 }}, 
  { $project: { _id: 0, title: 1, launch: 1}},
  { $skip: 2 }
])
db.books.aggregate([
  { $sort: { launch: -1 }}, 
  { $project: { _id: 0, title: 1, launch: 1}},
  { $skip: 2 },
  { $limit: 3 }
])


mongo
use booklog
db.books.aggregate([
  { $group: {_id: "$publisher", count: {$sum: 1}}}
])
db.books.aggregate([
  { $group: {_id: "$publisher", count: {$sum: 1}}},
  { $project: {_id: 0, publisher: "$_id", count: 1}}
])


mongo
use booklog
db.authors.aggregate([
  { $project: { _id: 0, name: { $split: ["$name"," "]}}}
])
db.books.aggregate([
  { $project: { _id: 0, title: { $concat: ["$title"," (", "$publisher", ") "]}}}
])


mongo
use booklog
db.books.aggregate([
  { $project: {
      _id: 0,
      title: 1,
      status: {
        $cond: {
          if:{ $gte:[{$size: "$reviews"}, 2] },
          then: "注目",
          else: ""
        }
      }
    } 
  }
])
db.books.aggregate([
  { $project: {
      _id: 0,
      title: 1,
      status: {
        $switch: {
          branches:[
            { case: { $gte: [{$size: "$reviews"}, 2]}, then: "A"},
            { case: { $eq: [{$size: "$reviews"}, 1]}, then: "B"}
          ],
          default: "C"
        }
      }
    } 
  }
])


mongo
use booklog
db.books.aggregate([
  { $match: { _id: ObjectId("5b6f03376c25c37f77e69177") }},
  { 
    $lookup:{
      from: "reviews",
      localField: "_id",
      foreignField: "book",
      as: "reviews"
    } 
  }
])

db.books.aggregate([
  { $match: { _id: ObjectId("5b6f03376c25c37f77e69177") }},
  { 
    $lookup:{
      from: "reviews",
      let: { targets: "$reviews"},
      pipeline: [
        { 
          $match: 
            {
              $expr: {$in : ["$_id", "$$targets"]}
            }
        }
      ],
      as: "reviews"
    } 
  }
])